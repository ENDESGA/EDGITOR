name: build_vcpkg
on: [push]

jobs:
  job:
    name: ${{ matrix.os }}-build_vcpkg
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows-static
            vcpkgCommitId: '8a9a97315aefb3f8bc5d81bf66ca0025938b9c91'
            vcpkgPackages: 'sdl2 sdl2-image sdl2-ttf'
            osDependenciesCommand: |
              choco install ninja
              choco install git.install --params "/GitAndUnixToolsOnPath"
          - os: ubuntu-latest
            triplet: x64-linux
            vcpkgCommitId: '8a9a97315aefb3f8bc5d81bf66ca0025938b9c91'
            vcpkgPackages: 'sdl2 sdl2-image sdl2-ttf'
            osDependenciesCommand: |
              sudo apt-get install ninja-build -y
              sudo apt-get install xorg-dev
              sudo apt-get install freeglut3-dev
              sudo apt-get install libgl1-mesa-dev
          - os: macos-latest
            triplet: x64-osx
            vcpkgCommitId: '8a9a97315aefb3f8bc5d81bf66ca0025938b9c91'
            vcpkgPackages: 'sdl2 sdl2-image sdl2-ttf'
            osDependenciesCommand: brew install ninja

    steps:
      # Checkout the git repository
      - uses: actions/checkout@v1
        with:
          submodules: true
      # Install system dependencies
      - name: install dependencies
        run: '${{ matrix.osDependenciesCommand }}'
      # Fetch the cmake executable
      - uses: lukka/get-cmake@latest
      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash
      # Install the vcpkg packages
      - name: Restore artifacts, or run vcpkg, build and cache artifacts
        uses: lukka/run-vcpkg@v3
        id: runvcpkg
        with:
          vcpkgArguments: '${{ matrix.vcpkgPackages }}'
          vcpkgTriplet: '${{ matrix.triplet }}'
          vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
          vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'
      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash
      - name: Prints outputs of run-vcpkg task
        run: echo "'${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}' '${{  steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}' "
      - name: Run CMake+Ninja without triplet
        uses: lukka/run-cmake@v2
        id: runcmake
        with:
          cmakeGenerator: 'Ninja'
          cmakeListsOrSettingsJson: 'CMakeListsTxtBasic'
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildWithCMakeArgs: '-- -v'
          buildDirectory: '${{ runner.workspace }}/b/ninja/'
      - name: Run CMake+Ninja with triplet (cmd)
        uses: lukka/run-cmake@v2
        id: runcmake_cmd
        with:
          cmakeGenerator: 'Ninja'
          cmakeListsOrSettingsJson: 'CMakeListsTxtBasic'
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildWithCMakeArgs: '-- -v'
          vcpkgTriplet: ${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}
          buildDirectory: '${{ runner.workspace }}/b/ninja/'
      - name: Run CMake+Ninja with triplet (bash)
        if: false
        uses: lukka/run-cmake@v2
        id: runcmake_bash
        with:
          cmakeGenerator: 'Ninja'
          cmakeListsOrSettingsJson: 'CMakeListsTxtBasic'
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildWithCMakeArgs: '-- -v'
          vcpkgTriplet: ${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}
          buildDirectory: '${{ runner.workspace }}/b/ninja-bash/'
          useShell: bash
      # Collects all project binary and resources into a single folder
      - name: Install with CMake
        run: |
          mkdir release
          cmake --install ${{ runner.workspace }}/b/ninja/ --prefix ./release
      - name: Compress build
        uses: papeloto/action-zip@v1
        with:
          files: release/
          dest: EDGITOR.zip
      # Uploads the zip as a build artifact
      - uses: actions/upload-artifact@v2
        with:
          name: build-${{ matrix.triplet }}
          path: EDGITOR.zip
      # Creates and uploads a release if the push is tagged
      - name: Create Release
        # Only run if push is tagged
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        # Only run if push is tagged
        if: startsWith(github.ref, 'refs/tags/')
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: EDGITOR.zip
          asset_name: EDGITOR-'${{ matrix.triplet }}'.zip
          asset_content_type: application/zip